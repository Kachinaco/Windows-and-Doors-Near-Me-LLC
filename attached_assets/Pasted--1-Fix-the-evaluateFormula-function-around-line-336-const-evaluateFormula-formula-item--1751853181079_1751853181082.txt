// 1. Fix the evaluateFormula function (around line 336)
const evaluateFormula = (formula, item) => {
  if (!formula) return null;
  
  try {
    // Replace column names with actual values
    let expression = formula;
    
    // Get all column IDs (not just numeric ones)
    columns.forEach(column => {
      const columnId = column.id;
      const columnValue = item.values?.[columnId];
      let value = 0;
      
      // Convert different value types to numbers
      if (columnValue !== undefined && columnValue !== null && columnValue !== "") {
        if (typeof columnValue === 'number') {
          value = columnValue;
        } else if (typeof columnValue === 'string') {
          const parsed = parseFloat(columnValue);
          value = isNaN(parsed) ? 0 : parsed;
        } else if (typeof columnValue === 'boolean') {
          value = columnValue ? 1 : 0;
        } else if (column.type === 'checkbox') {
          value = columnValue === true || columnValue === "true" ? 1 : 0;
        }
      }
      
      // Replace column ID references in the formula
      // Use word boundaries to avoid partial matches
      const regex = new RegExp(`\\b${columnId}\\b`, 'gi');
      expression = expression.replace(regex, value.toString());
    });
    
    // Also try replacing column names (not just IDs)
    columns.forEach(column => {
      const columnName = column.name.toLowerCase().replace(/\s+/g, '');
      const columnValue = item.values?.[column.id];
      let value = 0;
      
      if (columnValue !== undefined && columnValue !== null && columnValue !== "") {
        if (typeof columnValue === 'number') {
          value = columnValue;
        } else if (typeof columnValue === 'string') {
          const parsed = parseFloat(columnValue);
          value = isNaN(parsed) ? 0 : parsed;
        } else if (typeof columnValue === 'boolean' || column.type === 'checkbox') {
          value = (columnValue === true || columnValue === "true") ? 1 : 0;
        }
      }
      
      const regex = new RegExp(`\\b${columnName}\\b`, 'gi');
      expression = expression.replace(regex, value.toString());
    });
    
    // Basic safety check - only allow numbers, operators, and parentheses
    if (!/^[0-9+\-*/.() ]+$/.test(expression)) {
      console.error('Invalid formula expression:', expression);
      return "Invalid formula";
    }
    
    // Evaluate the expression
    const result = Function('"use strict"; return (' + expression + ')')();
    
    // Round to 2 decimal places if it's a decimal
    if (typeof result === 'number') {
      return Math.round(result * 100) / 100;
    }
    
    return result;
  } catch (error) {
    console.error('Formula evaluation error:', error);
    return "Error";
  }
};

// 2. Update the applyAIFormula function to properly save the formula (around line 312)
const applyAIFormula = (formula) => {
  if (!formulaAssistant.columnId || !formula) {
    console.log("Cannot apply formula:", { columnId: formulaAssistant.columnId, formula });
    showToast("Error: No column selected or formula is empty", "error");
    return;
  }

  console.log("Applying formula:", { columnId: formulaAssistant.columnId, formula });

  // Update the column with the formula
  setColumns(prev => prev.map(col => 
    col.id === formulaAssistant.columnId 
      ? { ...col, formula: formula.trim() }
      : col
  ));

  showToast("Formula saved successfully!", "success");
  
  // Keep the assistant open for further editing
  setFormulaAssistant(prev => ({
    ...prev,
    currentFormula: formula.trim()
  }));
};

// 3. Fix the renderCell function for formula type (around line 1845)
case "formula":
  // Get the column's formula
  const columnFormula = column.formula || "";
  const formulaResult = evaluateFormula(columnFormula, item);
  
  return (
    <div className="h-6 text-xs flex items-center justify-between px-2 text-purple-700 bg-purple-50 rounded font-medium group hover:bg-purple-100 transition-colors">
      <span>{formulaResult !== null ? formulaResult : "—"}</span>
      <button
        onClick={(e) => {
          e.stopPropagation();
          openFormulaAssistant(column.id, columnFormula);
        }}
        className="opacity-0 group-hover:opacity-100 text-purple-600 hover:text-purple-800 transition-all p-0.5"
        title="Edit Formula"
      >
        ✨
      </button>
    </div>
  );

// 4. Update handleSelectColumnType to pass empty formula initially (around line 596)
if (type === "formula") {
  const newColumn = {
    id: `col_${Date.now()}`,
    name: "Formula Column",
    type: "formula",
    order: Math.max(...columns.map(col => col.order)) + 1,
    formula: "" // Start with empty formula
  };
  setColumns(prev => [...prev, newColumn]);
  setAddColumnMenuOpen(null);
  
  // Open AI Formula Assistant for the new column
  setTimeout(() => {
    openFormulaAssistant(newColumn.id, "");
  }, 100);
  return;
}

// 5. Add some sample data with numeric values to test formulas
// Update your initial boardItems state (around line 84)
const [boardItems, setBoardItems] = useState([
  {
    id: 1,
    values: {
      item: "Kitchen Renovation Project",
      status: "in progress",
      assignedTo: "1", // Use member ID
      dueDate: "2025-07-15",
      checkbox: false,
      progress: 65,
      email: "client1@example.com",
      phone: "(555) 123-4567",
      location: "123 Main St, Anytown USA",
      cost: 25000,      // Add numeric fields
      hoursBudget: 120,
      hoursSpent: 78
    },
    groupName: "In Progress", // Add groupName
    folders: []
  },
  // ... rest of your items
]);